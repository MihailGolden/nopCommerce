@model Nop.Web.Models.Catalog.SearchModel
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(T("PageTitle.Search").Text);
    //page class
    Html.AppendPageCssClassParts("html-search-page");
}
<script asp-location="Footer">
    $(document).ready(function () {
        $("#@Html.IdFor(model => model.adv)").on('click', toggleAdvancedSearch);
        toggleAdvancedSearch();
    });

    function toggleAdvancedSearch() {
        if ($('#@Html.IdFor(model => model.adv)').is(':checked')) {
            $('#advanced-search-block').show();
        }
        else {
            $('#advanced-search-block').hide();
        }
    }
</script>
<div class="page search-page">
    <div class="page-title">
        <h1>@T("Search")</h1>
    </div>
    <div class="page-body">
        <div class="search-input">
            <form asp-route="ProductSearch" method="get">
                <div class="fieldset">
                    <div class="form-fields">
                        <div class="basic-search">
                            <div class="inputs">
                                <label asp-for="q">@T("Search.SearchTerm"):</label>
                                <input asp-for="q" class="search-text" />
                            </div>
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductSearchPageBasic })
                            <div class="inputs reversed">
                                <input asp-for="adv" />
                                <label asp-for="adv">@T("Search.AdvancedSearch")</label>
                            </div>
                        </div>
                        <div class="advanced-search" id="advanced-search-block">
                            @if (Model.AvailableCategories.Count > 0)
                            {
                                <div class="inputs">
                                    <label asp-for="cid">@T("Search.Category"):</label>
                                    <select asp-for="cid" asp-items="Model.AvailableCategories"></select>
                                </div>
                                <div class="inputs reversed">
                                    <input asp-for="isc" />
                                    <label asp-for="isc">@T("Search.IncludeSubCategories")</label>
                                </div>
                            }
                            @if (Model.AvailableManufacturers.Count > 0)
                            {
                                <div class="inputs">
                                    <label asp-for="mid">@T("Search.Manufacturer"):</label>
                                    <select asp-for="mid" asp-items="Model.AvailableManufacturers"></select>
                                </div>
                            }
                            @if (Model.asv && Model.AvailableVendors.Count > 0)
                            {
                                <div class="inputs">
                                    <label asp-for="vid">@T("Search.Vendor"):</label>
                                    <select asp-for="vid" asp-items="Model.AvailableVendors"></select>
                                </div>
                            }
                            <div class="inputs">
                                <label for="price-range">@T("Search.PriceRange"):</label>
                                <span id="price-range" class="price-range">
                                    @T("Search.PriceRange.From")
                                    <input asp-for="pf" class="price-from" aria-label="@T("Search.PriceRange.From")" />
                                    @T("Search.PriceRange.To")
                                    <input asp-for="pt" class="price-to" aria-label="@T("Search.PriceRange.To")" />
                                </span>
                            </div>
                            <div class="inputs reversed">
                                <input asp-for="sid" />
                                <label asp-for="sid">@T("Search.SearchInDescriptions")</label>
                            </div>
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductSearchPageAdvanced })
                        </div>
                    </div>
                </div>
                <div class="buttons">
                    <input type="submit" class="button-1 search-button" value="@T("Search.Button")" />
                </div>
            </form>
        </div>
        @await Html.PartialAsync("_CatalogSelectors", Model.CatalogProductsModel)
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductSearchPageBeforeResults })
        <div class="search-results">

            @await Html.PartialAsync("_ProductsInGridOrLines", Model.CatalogProductsModel)
            @if (Model.CatalogProductsModel.UseAjaxLoading)
            {
                Html.AddScriptParts(ResourceLocation.Footer, "~/js/public.ajaxcatalogproducts.js");
                <script asp-location="Footer">
                    $(document).ready(function () {
                        // todo: add handler on search button

                        AjaxCatalogProducts.init({
                            browserPath: '@Context.Request.Path',
                            fetchUrl: '@Html.Raw(Url.Action("SearchProducts", "Catalog"))'
                        });
                        $(AjaxCatalogProducts).on('before', function (e) {
                            var urlBuilder = e.payload.urlBuilder;
                            if (urlBuilder) {
                                var $q = $('#@Html.IdFor(model => model.q)');
                                if ($q) urlBuilder.addCustomParameter('q', $q.val());

                                var $adv = $('#@Html.IdFor(model => model.adv)');
                                if ($adv) urlBuilder.addCustomParameter('adv', $adv.is(':checked'));

                                var $cid = $('#@Html.IdFor(model => model.cid)');
                                if ($cid) urlBuilder.addCustomParameter('cid', $cid.val());

                                var $isc = $('#@Html.IdFor(model => model.isc)');
                                if ($isc) urlBuilder.addCustomParameter('isc', $isc.is(':checked'));

                                var $mid = $('#@Html.IdFor(model => model.mid)');
                                if ($mid) urlBuilder.addCustomParameter('mid', $mid.val());

                                var $vid = $('#@Html.IdFor(model => model.vid)');
                                if ($vid) urlBuilder.addCustomParameter('vid', $vid.val());

                                var $pf = $('#@Html.IdFor(model => model.pf)');
                                if ($pf) urlBuilder.addCustomParameter('pf', $pf.val());

                                var $pt = $('#@Html.IdFor(model => model.pt)');
                                if ($pt) urlBuilder.addCustomParameter('pt', $pt.val());

                                var $sid = $('#@Html.IdFor(model => model.sid)');
                                if ($sid) urlBuilder.addCustomParameter('sid', $sid.is(':checked'));
                            }
                        });
                    });
                </script>
            }

        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductSearchPageAfterResults })
    </div>
</div>
